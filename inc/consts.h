#ifndef PCARS_CONSTS_H_
#define PCARS_CONSTS_H_

#include <cstdint>

#include <vector>
#include <string>

namespace pcars {

/// \brief Constants
///
///		Constants from project car API header files
///		and decoder constants

using Position = unsigned int;
using Amount = unsigned int;
using Port = unsigned int;
using Lap_Number = int;

using PCars_Data = std::vector<unsigned char>;

using Vector_Float = std::vector<float>;
using Vector_S16 = std::vector<int16_t>;
using Vector_String = std::vector<std::string>;
using Vector_Bool = std::vector<bool>;
using Vector_U8 = std::vector<uint8_t>;
using Vector_U16 = std::vector<uint16_t>;
using Vector_UInt = std::vector<unsigned int>;
using Vector_Int = std::vector<int>;

enum class Packet_Type {
	PACKET_TYPE_TELEMETRY,
	PACKET_TYPE_PARTICIPANT_INFO_STRINGS,
	PACKET_TYPE_PARTICIPANT_INFO_STRINGS_ADDITIONAL
};

enum class Packet_Type_V2 {
	PACKET_CAR_PHYSICS = 0,
	PACKET_RACE_DEFINITION = 1,
	PACKET_PARTICIPANTS = 2,
	PACKET_TIMINGS = 3,
	PACKET_GAME_STATE = 4,
	PACKET_WEATHER_STATE = 5, // not sent at the moment, information can be found in the game state packet
	PACKET_VEHICLE_NAMES = 6, //not sent at the moment
	PACKET_TIME_STATS = 7,
	PACKET_PARTICIPANT_VEHICLE_NAMES = 8
};

enum class Game_State
{
	GAME_EXITED = 0,
	GAME_FRONT_END,
	GAME_INGAME_PLAYING,
	GAME_INGAME_PAUSED,
	GAME_INGAME_INMENU_TIME_TICKING,
	GAME_INGAME_RESTARTING,
	GAME_INGAME_REPLAY,
	GAME_FRONT_END_REPLAY,
	GAME_MAX
};

enum class Session_State {
	SESSION_INVALID = 0,
	SESSION_PRACTICE,
	SESSION_TEST,
	SESSION_QUALIFY,
	SESSION_FORMATION_LAP,
	SESSION_RACE,
	SESSION_TIME_ATTACK,
	SESSION_MAX
};

enum class Race_State {
	RACESTATE_INVALID = 0,
	RACESTATE_NOT_STARTED,
	RACESTATE_RACING,
	RACESTATE_FINISHED,
	RACESTATE_DISQUALIFIED,
	RACESTATE_RETIRED,
	RACESTATE_DNF,
	RACESTATE_MAX
};

enum class Flag_Colour {
	FLAG_COLOUR_NONE = 0,
	FLAG_COLOUR_GREEN,
	FLAG_COLOUR_BLUE,
	FLAG_COLOUR_WHITE,
	FLAG_COLOUR_YELLOW,
	FLAG_COLOUR_DOUBLE_YELLOW,
	FLAG_COLOUR_BLACK,
	FLAG_COLOUR_CHEQUERED,
	FLAG_COLOUR_MAX
};

enum class Flag_Reason {
	FLAG_REASON_NONE = 0,
	FLAG_REASON_SOLO_CRASH,
	FLAG_REASON_VEHICLE_CRASH,
	FLAG_REASON_VEHICLE_OBSTRUCTION,
	FLAG_REASON_MAX
};

enum class Pit_Mode {
	PIT_MODE_NONE = 0,
	PIT_MODE_DRIVING_INTO_PITS,
	PIT_MODE_IN_PIT,
	PIT_MODE_DRIVING_OUT_OF_PITS,
	PIT_MODE_IN_GARAGE,
	PIT_MODE_MAX
};

enum class Pit_Schedule {
	PIT_SCHEDULE_NONE = 0,
	PIT_SCHEDULE_STANDARD,
	PIT_SCHEDULE_DRIVE_THROUGH,
	PIT_SCHEDULE_STOP_GO,
	PIT_SCHEDULE_MAX
};

enum class Pit_Schedule_V2
{
	PIT_SCHEDULE_NONE = 0,        
	PIT_SCHEDULE_PLAYER_REQUESTED, 
	PIT_SCHEDULE_ENGINEER_REQUESTED,
	PIT_SCHEDULE_DAMAGE_REQUESTED,
	PIT_SCHEDULE_MANDATORY,    
	PIT_SCHEDULE_DRIVE_THROUGH, 
	PIT_SCHEDULE_STOP_GO,        
	PIT_SCHEDULE_PITSPOT_OCCUPIED,
	PIT_SCHEDULE_MAX
};

enum class Car_Flags
{
	CAR_HEADLIGHT         = (1<<0),
	CAR_ENGINE_ACTIVE     = (1<<1),
	CAR_ENGINE_WARNING    = (1<<2),
	CAR_SPEED_LIMITER     = (1<<3),
	CAR_ABS               = (1<<4),
	CAR_HANDBRAKE         = (1<<5),
	CAR_STABILITY         = (1<<6),
	CAR_TRACTION_CONTROL  = (1<<7)
};

enum class Tyre_Flags
{
	TYRE_ATTACHED         = (1<<0),
	TYRE_INFLATED         = (1<<1),
	TYRE_IS_ON_GROUND     = (1<<2),
};

enum class Crash_State {
	CRASH_DAMAGE_NONE = 0,
	CRASH_DAMAGE_OFFTRACK,
	CRASH_DAMAGE_LARGE_PROP,
	CRASH_DAMAGE_SPINNING,
	CRASH_DAMAGE_ROLLING,
	CRASH_MAX
};

enum class Terrain
{
	TERRAIN_ROAD = 0,
	TERRAIN_LOW_GRIP_ROAD,
	TERRAIN_BUMPY_ROAD1,
	TERRAIN_BUMPY_ROAD2,
	TERRAIN_BUMPY_ROAD3,
	TERRAIN_MARBLES,
	TERRAIN_GRASSY_BERMS,
	TERRAIN_GRASS,
	TERRAIN_GRAVEL,
	TERRAIN_BUMPY_GRAVEL,
	TERRAIN_RUMBLE_STRIPS,
	TERRAIN_DRAINS,
	TERRAIN_TYREWALLS,
	TERRAIN_CEMENTWALLS,
	TERRAIN_GUARDRAILS,
	TERRAIN_SAND,
	TERRAIN_BUMPY_SAND,
	TERRAIN_DIRT,
	TERRAIN_BUMPY_DIRT,
	TERRAIN_DIRT_ROAD,
	TERRAIN_BUMPY_DIRT_ROAD,
	TERRAIN_PAVEMENT,
	TERRAIN_DIRT_BANK,
	TERRAIN_WOOD,
	TERRAIN_DRY_VERGE,
	TERRAIN_EXIT_RUMBLE_STRIPS,
	TERRAIN_GRASSCRETE,
	TERRAIN_LONG_GRASS,
	TERRAIN_SLOPE_GRASS,
	TERRAIN_COBBLES,
	TERRAIN_SAND_ROAD,
	TERRAIN_BAKED_CLAY,
	TERRAIN_ASTROTURF,
	TERRAIN_SNOWHALF,
	TERRAIN_SNOWFULL,
	TERRAIN_DAMAGED_ROAD1,
	TERRAIN_TRAIN_TRACK_ROAD,
	TERRAIN_BUMPYCOBBLES,
	TERRAIN_ARIES_ONLY,
	TERRAIN_ORION_ONLY,
	TERRAIN_B1RUMBLES,
	TERRAIN_B2RUMBLES,
	TERRAIN_ROUGH_SAND_MEDIUM,
	TERRAIN_ROUGH_SAND_HEAVY,
	TERRAIN_SNOWWALLS,
	TERRAIN_ICE_ROAD,
	TERRAIN_RUNOFF_ROAD,
	TERRAIN_ILLEGAL_STRIP,
	TERRAIN_MAX
};


}

#endif

